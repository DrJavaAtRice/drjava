<!-- DynamicJava Build Script -->

<!-- This build script is based on the template located at "trunk/misc/build-template.xml"
     in the DrJava Subversion repository.  In general, changes made to the script should be
     reflected in the template as well. -->
     
<project name="dynamicjava" default="help">

  <property name="readable-project-name" value="DynamicJava" />
  <property name="src-working-dir" value="src/edu/rice/cs/dynamicjava" />
  <property name="main-class" value="edu.rice.cs.dynamicjava.DynamicJava" />
  <property name="svn-repository" value="https://svn.sourceforge.net/svnroot/drjava" />

  <!-- Properties loaded from a file -->
  <property name="props" value="../ant.properties" />
  <property file="${props}" />

  <!-- Default settings for properties -->
  <property name="test-spec" value="*" />
  <property name="test-repeat" value="1" />
  <property name="test-timeout" value="1440" />
  <property name="test-formatter" value="oneline" />
  <property name="test-halt" value="false" />
  <property name="force-server" value="no" />
  <property name="findbugs-timeout" value="30" />
  <property name="debug" value="void" />
  <property name="plt.debug.log" value="${debug}" />
  <property name="error" value="stderr" />
  <property name="plt.error.log" value="${error}" />
  <property name="clean-can-fail" value="yes" /> 
  <property name="link-source" value="no" />
  
  <property environment="env" />
  <property name="java7-home" value="${env.JAVA7_HOME}" />
  <property name="java6-home" value="${env.JAVA6_HOME}" />
  <property name="javacc-home"  value="${env.JAVACC_HOME}" />
<!--  <property name="clover-jar" value="${env.CLOVER_JAR}" /> -->
  <property name="findbugs-home" value="${env.FINDBUGS_HOME}" />
  
  <property name="is-development" value="yes" /> <!-- Development or stable release -->
  <property name="tag-append" value="" /> <!-- "stable", "beta", or none -->
  
  <!-- Don't use or inherit the CLASSPATH environment variable for anything -->
  <property name="build.sysclasspath" value="ignore" />
  
  <!-- Extension that defines the "extendclasspath" task.  -->
  <taskdef resource="com/cenqua/ant/antlib.xml" classpath="lib/buildlib/cenquatasks.jar" />

  <!-- Extension containing various tools, including "for" and "if" -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="lib/buildlib/ant-contrib.jar"/>

  <!-- fornum task, used for test-repeat -->
  <taskdef name="fornum" classname="edu.rice.cs.plt.ant.ForNumTask" classpath="lib/buildlib/plt-ant.jar" onerror="report" />
  
  <extendclasspath path="lib/buildlib/junit.jar" />

  <fileset id="libs" dir="lib" includes="*.jar" /> <!-- Only include jars that are at the top level (not in buildlib) -->
  
  
  
  <!-- ************
       Help Targets
       ************ -->
  
  <target name="help" description="Print general build script information">
    <echo message="----------------------------------------------------------------------" />
    <echo message="${readable-project-name} Build Scripts" />
    <echo message="----------------------------------------------------------------------" />
    <echo message="Type 'ant -projecthelp' or 'ant -p' to see the list of targets." />
    <echo message="Type 'ant options' to see the list of customizable options." />
    <echo message="" />
    <echo message="For this build file to function properly, the following environment" />
    <echo message="variables may need to be defined (depending on the target invoked):" />
    <echo message="PATH: The 'javac' command is used for compilation;" />
    <echo message="      the 'java' command is used by default in testing/running; " />
    <echo message="      the 'svn' command is used to generate version numbers and " />
    <echo message="      in Subversion targets" />
    <echo message="JAVA6_HOME: Home folder of the Java 6 JRE or JDK (required for" />
    <echo message="            '-6' targets)" />
    <echo message="JAVA7_HOME: Home folder of the Java 7 JRE or JDK (required for" />
    <echo message="            compiling and '-7' targets)" />
    <echo message="JAVACC_HOME: Top-level directory of JavaCC (version 4.1+ is preferred)" />
<!--    <echo message="CLOVER_JAR: Location of the Clover jar file" /> -->
    <echo message="FINDBUGS_HOME: Location of the FindBugs installation" />
    <echo message="" />
    <echo message="For control over the version of Java used to run Ant, set JAVA_HOME." />
    <echo message="Ant may also require ANT_HOME to be set.  Note that the value of " />
    <echo message="CLASSPATH will be ignored -- classes on the system class path will " />
    <echo message="not be visible during the build process." />
  </target>
  
  <target name="options" description="Print the list of customizable options">
    <echo message="----------------------------------------------------------------------" />
    <echo message="${readable-project-name} Build Script Customizable Options" />
    <echo message="----------------------------------------------------------------------" />
    <echo message="The following properties control custom behavior.  They may be defined " />
    <echo message="on the command line ('-Dname=value'), in a properties file (named " />
    <echo message="'../ant.properties' by default, and containing 'name=value' pairs on " />
    <echo message="each line), or in the ANT_ARGS environment variable (using " />
    <echo message="'-Dname=value')." />
    <echo message="" />
    <echo message="props: An external properties file (default: 'ant.properties')" />
    <echo message="test-spec: A matching string for filtering the tests to be run; may be" />
    <echo message="           comma-delimited to run multiple test sets" />
    <echo message="test-repeat: The number of times the tests should be repeated" />
    <echo message="test-timeout: A time limit (in minutes) for running a test set" />
    <echo message="test-formatter: The kind of formatter to use for test results: one of" />
    <echo message="                 'quiet', 'oneline', 'brief', 'plain', or 'xml'" />
    <echo message="                (default: oneline)" />
    <echo message="test-halt: Whether unit testing should stop after the *first* failure"/>
    <echo message="           (default: no)" />
    <echo message="skip-test: Define to indicate that testing should be silently skipped" />
    <echo message="skip-clean: Define to indicate that cleaning should be silently skipped" />
    <echo message="skip-tag: Define to indicate that tagging should be silently skipped" />
    <echo message="force-server: Whether the '-server' option should always be used when" />
    <echo message="              running or testing (Default: no)" />
    <echo message="clean-can-fail: Whether the failure of a 'clean' operation can halt" />
    <echo message="                the build (default: yes)" />
    <echo message="findbugs-timeout: A time limit (in minutes) for running findbugs " />
    <echo message="                  (default: 30)" />
    <echo message="debug: Type of the debug log when running or testing: one of 'stdout'," />
    <echo message="       'stderr', 'file', 'assert', 'popup', 'tree', or 'void'" />
    <echo message="       (equivalent to setting the property 'plt.debug.log'; default: " />
    <echo message="       void)" />
    <echo message="error: Type of the error log when running or testing: one of 'stdout'," />
    <echo message="       'stderr', 'file', 'assert', 'popup', 'tree', or 'void'" />
    <echo message="       (equivalent to setting the property 'plt.error.log'; default: " />
    <echo message="       stderr)" />
  </target>

  
  
  <!-- ************
       Build Target
       ************ -->
  
  <target name="build" depends="test, jar" description="Shortcut for 'test' and 'jar'">
  </target>
  


  <!-- *************************
       Source-generating Targets
       ************************* -->
       
  <property name="code-status-source" value="${src-working-dir}/CodeStatus.orig" />
  <property name="code-status-target" value="${src-working-dir}/CodeStatus.java" />
  <property name="version-source" value="${src-working-dir}/Version.orig" />
  <property name="version-target" value="${src-working-dir}/Version.java" />
  <property name="type-ast" value="${src-working-dir}/symbol/Type.ast" />
  <property name="type-ast-dir" value="${src-working-dir}/symbol/type" />
  <property name="dynamicjava-parser" value="src/koala/dynamicjava/parser/grammar.jj" />
  <property name="dynamicjava-parser-dir" value="src/koala/dynamicjava/parser/impl" />

  <target name="generate-source" depends="resolve-development-value, resolve-version-tag" 
          description="Generate the CodeStatus, Version, type, and parser source files">
          
    <filter token="DEVELOPMENT" value="${development-value}" />
    <filter token="DATE" value="${DSTAMP}" />
    <filter token="TIME" value="${TSTAMP}" />
    <filter token="REVISION" value="${svn-revision}" />
    <echo message="Processing ${code-status-source}" />
    <copy file="${code-status-source}" tofile="${code-status-target}" filtering="yes" />
    <echo message="Processing ${version-source}" />
    <copy file="${version-source}" tofile="${version-target}" filtering="yes" />
    
    <antcall target="generate-ast">
      <param name="generate-sourcefile" value="${type-ast}" />
      <param name="generate-dir" value="${type-ast-dir}" />
    </antcall>
    
    <antcall target="generate-parser">
      <param name="generate-sourcefile" value="${dynamicjava-parser}" />
      <param name="generate-dir" value="${dynamicjava-parser-dir}" />
    </antcall>
    
    <!-- Any additional files to be generated may be processed here -->

  </target>
  
  <!-- Matches source files that are generated.  Search is relative to the base directory
       (NOT "src", since "src-working-dir" is defined relative to the base).  This is used 
       by "clean". -->
  <patternset id="generated-sources">
    <include name="${code-status-target}" />
    <include name="${version-target}" />
    <include name="${type-ast-dir}/**/*" />
    <include name="${type-ast-dir}" />
    <include name="${dynamicjava-parser-dir}/**/*" />
    <include name="${dynamicjava-parser-dir}" />
    <!-- Additional generated sources should be listed here -->
  </patternset>

  <!-- Must be called from an antcall -->
  <target name="generate-parser" depends="check-generate-dir-from-file" unless="already-generated">
    <echo message="Processing ${generate-sourcefile}" />
    <delete dir="${generate-dir}" />
    <mkdir dir="${generate-dir}" />
    <javacc target="${generate-sourcefile}" outputdirectory="${generate-dir}" javacchome="${javacc-home}" />
    <!-- Fix problems in generated code that cause compiler warnings (occurs in javacc 4.1) -->
    <replace dir="${generate-dir}"
             token="int hiByte = (int)(curChar >> 8);"
             value="int hiByte = curChar >> 8;" />
  </target>
   
  <!-- Must be called from an antcall -->
  <target name="generate-ast" depends="check-generate-dir-from-file" unless="already-generated">
    <taskdef name="astgen" classpath="lib/buildlib/astgen.jar" classname="edu.rice.cs.astgen.AntTask" />
    <echo message="Processing ${generate-sourcefile}" />
    <delete dir="${generate-dir}" />
    <mkdir dir="${generate-dir}" />
    <astgen file="${generate-sourcefile}" />
  </target>
  
  
  
  <!-- *******************
       Compilation Targets
       ******************* -->
       
  <target name="compile" depends="generate-source, do-compile, copy-resources, unjar-libs"
          description="Compile all source files (after generating the source)">
  </target>
  
  <target name="do-compile" depends="resolve-java7-runtime">
  
    <echo message="Compiling src directory to classes/base and classes/test with command 'javac'" />
    
    <mkdir dir="classes/base" />
    <mkdir dir="classes/test" />
    
    <!-- Move any test classes back to base to prevent recompilation -->
    <move todir="classes/base">
      <fileset dir="classes/test" includes="**/*" />
    </move>
    
    <javac srcdir="src" destdir="classes/base" source="1.6" target="1.6"
           bootclasspath="${java7-runtime}" sourcepath="" includeAntRuntime="no"
           executable="javac" fork="yes" memoryMaximumSize="512M"
           debug="on" optimize="off" deprecation="on"	>
      <classpath>
        <fileset refid="libs" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="lib/buildlib/jlbench-base.jar" />
        <pathelement location="classes/base" />
      </classpath>
      <compilerarg value="-Xlint" />
      <!-- Ignore serial warnings, because they occur for every Throwable definition (among others) -->
      <compilerarg value="-Xlint:-serial" /> 
      <!-- Use the next line to compile against other sources, ignoring any unneeded classes.
           This can be useful in creating a pruned version of a jar file for the lib directory.
           (You must also clear the sourcepath="" option.)
      <include name="${src-working-dir}/**/*.java" /> -->
    </javac>
    
    <mkdir dir="classes/test" /> <!-- May be deleted by the previous move -->
    <move todir="classes/test">
      <fileset dir="classes/base">
        <include name="**/*Test.class" />
        <include name="**/*Test$*.class" />
        <include name="**/*TestCase.class" />
        <include name="**/*TestCase$*.class" />
        <!-- Additional test classes should be listed here -->
      </fileset>
    </move>
    
  </target>
  
  
  <target name="copy-resources">
    <copy todir="classes/base">
      <fileset dir="src">
        <include name="**/LICENSE" />
        <include name="**/README" />
        <include name="**/*.gif" />
        <include name="**/*.png" />
        <include name="**/*.jpg" />
        <include name="**/*.jpeg" />
        <include name="**/*.properties" />
        <!-- Additional resource files should be listed here -->
      </fileset>
    </copy>
  </target>
  
  
  <target name="unjar-libs">
    <antcall target="do-unjar-libs">
      <param name="generate-sourcedir" value="lib" />
      <param name="generate-dir" value="classes/lib" />
    </antcall>
  </target>
  
  <target name="do-unjar-libs" depends="check-generate-dir-from-dir" unless="already-generated">
    <echo message="Unjarring jar files in the lib directory" />
    <!-- Delete "classes/lib" in case it exists (but is out of date) -->
    <delete dir="classes/lib" />
    <mkdir dir="classes/lib" />
    <unjar dest="classes/lib">
      <fileset refid="libs" />
      <patternset excludes="META-INF/**" />
    </unjar>
  </target>
  
  

  <!-- ***************
       Testing Targets
       *************** -->
  
  <target name="test" depends="compile" unless="skip-test"
          description="Run all tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="test-jvm" value="java" />
    </antcall>
  </target>

  <target name="test-6" depends="compile, resolve-java6-exec" unless="skip-test"
          description="Run all tests under Java 6 (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="test-jvm" value="${java6-exec}" />
    </antcall>
  </target>
  
  <target name="test-7" depends="compile, resolve-java7-exec" unless="skip-test"
          description="Run all tests under Java 7 (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="test-jvm" value="${java7-exec}" />
    </antcall>
  </target>
  
  
  <target name="iterate-tests" depends="resolve-test-formatter-class">
    <!-- Calls do-test, unless that is overridden by the caller -->
    <property name="do-test-target" value="do-test" />
    <condition property="test-iteration-message">
      <not>
        <equals arg1="${test-repeat}" arg2="1" />
      </not>
    </condition>
    <condition property="test-output-to-file" value="yes" else="no">
      <equals arg1="${test-formatter}" arg2="xml" />
    </condition>
    
    <!-- Repeat tests 'test-repeat' times. -->
    <fornum count="${test-repeat}" param="iteration">
      <sequential>
        <trycatch property="test-failure" reference="test-failure-ref">
        
          <try>
            <for list="${test-spec}" param="test-filter-string-iter">
              <sequential>
                <limit minutes="${test-timeout}" failonerror="true">
                  <antcall target="${do-test-target}">
                    <param name="test-filter-string" value="@{test-filter-string-iter}" />
                  </antcall>
                </limit>
              </sequential>
            </for>
            <if>
              <istrue value="${test-output-to-file}" />
              <then>
                <mkdir dir="testResults/@{iteration}" />
              </then>
            </if>
          </try>
          
          <catch>
            <if>
              <istrue value="${test-halt}" />
              <then>
                <throw refid="test-failure-ref" />
              </then>
            </if>
          </catch>
          
          <finally>
            <if>
              <istrue value="${test-output-to-file}" />
              <then>
                <move todir="testResults/@{iteration}">
                  <fileset dir="${basedir}">
                    <include name="TEST*" />
                  </fileset>
                </move>
              </then>
            </if>
          </finally>
          
        </trycatch>
        
        <if>
          <isset property="test-iteration-message" />
          <then>
            <math result="iteration1" datatype="int"
                  operand1="@{iteration}" operation="+" operand2="1" />
            <echo message="" />
            <echo message="Completed test iteration ${iteration1} of ${test-repeat}" />
          </then>
        </if>
        
      </sequential>
    </fornum>
    
    <!-- Handle errors where test-halt is false -->
    <if>
      <isset property="test-failure" />
      <then>
        <!-- Using 'if="test-failure"' here doesn't seem to work -->
        <throw refid="test-failure-ref" />
      </then>
    </if>
    
  </target>
  
  
  <target name="do-test" depends="resolve-jvm-args">
    <echo message="Running all tests matching '${test-filter-string}' with command '${test-jvm}'" />
    <junit haltonfailure="${test-halt}" failureproperty="test-failed"
           fork="yes" forkmode="perTest" maxmemory="512M" jvm="${test-jvm}" dir="${basedir}">
      <classpath>
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="lib/buildlib/plt-ant.jar" /> <!-- required for custom formatter -->
        <pathelement location="lib/buildlib/jlbench-base.jar" />
<!--        <pathelement location="${clover-jar}" /> -->
        <pathelement location="classes/test" />
        <pathelement location="classes/base" />
        <pathelement location="classes/lib" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
        <!-- Add any properties that should be passed on -->
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
      <formatter classname="${test-formatter-class}" usefile="${test-output-to-file}" />
      <batchtest>
        <fileset dir="classes/test">
          <filename name="**/*${test-filter-string}*/**" />
          <filename name="**/*Test.class" />
        </fileset>
      </batchtest>
    </junit>
    <fail if="test-failed" message="One or more unit tests failed."/>
  </target>



  <!-- ***********
       Jar Targets
       *********** -->
       
  <target name="jar" depends="compile, resolve-version-tag" 
          description="Create the jar file with all classes and libs (compiling first)">
    <jar jarfile="${ant.project.name}.jar">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/lib" />
      <fileset dir="classes/base" />
    </jar>
  </target>

  <target name="jar-base" depends="compile, resolve-version-tag" 
          description="Create the jar file without any support libs (compiling first)">
    <jar jarfile="${ant.project.name}-base.jar">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/base" />
    </jar>
  </target>



  <!-- *********************
       Documentation Targets
       ********************* -->
  
  <target name="javadoc" depends="generate-source, resolve-version-tag"
          description="Generate javadocs from the source folder (after generating the source)">
    <antcall target="do-javadoc">
      <param name="generate-sourcedir" value="src" />
      <param name="generate-dir" value="docs/javadoc" />
    </antcall>
  </target>
  
  <target name="do-javadoc" depends="check-generate-dir-from-dir" unless="already-generated">
    <echo message="Generating javadocs" />
    <delete dir="docs/javadoc" />
    <mkdir dir="docs/javadoc" />
    <javadoc sourcepath="src" packagenames="*" destdir="docs/javadoc" maxmemory="512M"
             access="protected" Use="yes" Version="yes" Author="yes" Windowtitle="${readable-project-name} API (${version-tag})" linksource="${link-source}">
      <classpath>
        <fileset refid="libs" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="lib/buildlib/jlbench-base.jar" />
      </classpath>
      <link href="http://java.sun.com/j2se/1.5/docs/api" />
      <link href="http://junit.org/junit/javadoc/3.8.1" />
      <link href="http://drjava.org/javadoc/plt" />
      <!-- Additional external library APIs may be listed here -->
    </javadoc>
  </target>
  
<!--  
  <target name="clover" depends="clean, setup-clover, test, report-clover" 
          description="Generate a Clover test coverage report" />
  
  <target name="clover-6" depends="clean, setup-clover, test-6, report-clover" 
          description="Generate a Clover test coverage report under Java 6" />
  
  <target name="clover-5" depends="clean, setup-clover, test-5, report-clover" 
          description="Generate a Clover test coverage report under Java 5" />
-->  
<!--
  <target name="report-clover" depends="resolve-version-tag">
    <echo message="Generating Clover report" />
    <clover-report>
      <current outfile="docs/clover" title="${readable-project-name} Test Coverage (${version-tag})">
        <format type="html" />
      </current>
    </clover-report>

    <antcall target="clean-intermediate"> 
      <param name="clean-can-fail" value="no" />
    </antcall>
  </target>
-->
<!--
  <target name="setup-clover" depends="assert-clover-jar-exists">
    <extendclasspath path="${clover-jar}" />
    <taskdef resource="clovertasks" classpath="${clover-jar}" />
    <mkdir dir="cloverdb" />
    <clover-setup initString="cloverdb/clover.db">
      <files>
        <exclude name="**/*Test.java" />
        <exclude name="**/*TestCase.java" />
      </files>
    </clover-setup>
  </target>
-->

  <target name="findbugs" depends="assert-findbugs-exists, compile"
	      description="Generate a findbugs report (after compiling)">
    <taskdef name="findbugs" classpath="lib/buildlib/findbugs-ant.jar"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />
    <delete file="docs/findbugs.html" />
    <mkdir dir="docs" />
    <math result="findbugs-timeout-ms" datatype="int"
                  operand1="${findbugs-timeout}" operation="*" operand2="60000" />
    <!-- Add any bug codes to ignore here -->
    <property name="findbugs-excludes" value="Nm,Se,Bx,UPM,UrF,UuF,DLS" />
    <property name="findbugs-excludes-match"
              value="&lt;Match&gt;&lt;Bug code='${findbugs-excludes}'/&gt;&lt;/Match&gt;" />
    <echo file="findbugs-excludes.xml"
          message="&lt;FindBugsFilter&gt;${findbugs-excludes-match}&lt;/FindBugsFilter&gt;" />
    <findbugs home="${findbugs-home}" output="html" jvmargs="-Xmx512M" failOnError="true"
              outputFile="docs/findbugs.html" timeout="${findbugs-timeout-ms}"
              excludeFilter="findbugs-excludes.xml">
      <sourcepath path="src" />
      <class location="classes/base" />
      <class location="classes/test" />
      <auxclasspath>
        <pathelement location="classes/lib" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="lib/buildlib/jlbench-base.jar" />
      </auxclasspath>
    </findbugs>
    <delete file="findbugs-excludes.xml" />
  </target>


  
  <!-- *************
       Clean Targets
       ************* -->
       
  <target name="clean" depends="clean-intermediate, clean-products"
          description="Remove all build products; the result should match the intended Subversion contents">
  </target>

  <target name="clean-intermediate" unless="skip-clean">
    <echo message="Deleting all intermediate build products" />
    
    <delete dir="classes" failonerror="${clean-can-fail}" />
<!--    <delete dir="cloverdb" failonerror="${clean-can-fail}" /> -->

    <delete includeemptydirs="true" failonerror="${clean-can-fail}">
      <fileset dir="testFiles">
        <exclude name="**" />
        <!-- Additional test output files should be listed here -->
      </fileset>
      <fileset dir="${basedir}" defaultexcludes="no">
        <patternset refid="generated-sources" />
      </fileset>
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="TEST*" />
        <include name="src/**/*.class" />
        <include name="svn-info.txt" />
        <include name="findbugs-excludes.xml" />
        <!-- We could get rid of backups, but "update" ignores them, so they're okay.
             (doesn't work if defaultexcludes is "yes") -->
        <!-- <include name="**/*~" /> -->
        <!-- Get rid of pesky OS helper files (doesn't work if defaultexcludes is "yes") -->
        <include name="**/.DS_Store" />
        <include name="**/Thumbs.db" />
        <!-- Additional files to delete may be listed here -->
      </fileset>
    </delete>
    
  </target>
  
  <target name="clean-products" unless="skip-clean">
    <echo message="Deleting all final build products" />
    
    <delete dir="docs" failonerror="${clean-can-fail}" />
    <delete dir="testResults" failonerror="${clean-can-fail}" />
    
    <delete includeemptydirs="true" failonerror="${clean-can-fail}">
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="*.jar" />
        <include name="*.zip" />
        <include name="*.tar.gz" />
        <include name="*.exe" />
      </fileset>
    </delete>
    
  </target>



  <!-- ******************
       Subversion Targets 
       ****************** -->
  
  <target name="update" depends="clean" description="Reconcile source with the Subversion archive">
    <echo message="Running Subversion update" />
    <exec executable="svn" failonerror="yes">
      <arg value="update" />
    </exec>
    <exec executable="svn" failonerror="yes">
      <arg value="status" />
    </exec>
  </target>
  
  <target name="commit" depends="update, build" 
          description="Commit source to the Subversion archive (after building)">
    <antcall target="clean-intermediate"> <!-- Clean up after the latest build -->
      <param name="clean-can-fail" value="no" />
    </antcall>
    <exec executable="svn" failonerror="yes">
      <arg value="status" />
    </exec>
    <input message="Please enter a log message for the commit: "
           addproperty="svn-commit-message" />
    <echo message="Running Subversion commit" />
    <exec executable="svn" failonerror="yes">
      <arg value="commit" />
      <arg value="-m" />
      <arg value="${svn-commit-message}" />
    </exec>
  </target>

  <target name="tag" depends="update, resolve-version-tag" unless="skip-tag"
          description="Copy the working copy to a new Subversion tag (after updating)">
    <echo message="Creating a new Subversion tag with name ${version-tag}"/>
    <exec executable="svn" failonerror="yes">
      <arg value="copy" />
      <arg value="${basedir}" />
      <arg value="${svn-repository}/tags/${version-tag}" />
      <arg value="-m" />
      <arg value="Created tag ${version-tag}" />
    </exec>
  </target>
  
  <target name="branch" depends="update" 
          description="Copy the working copy to a new Subversion branch (after updating)">
    <echo message="This will create a new branch from your working copy.  If there are changes " />
    <echo message="in your copy that have not been committed, you may want to do so first, " />
    <echo message="so that there's a clear branch point for merging later." />
    <input message="Enter a name for the new branch: "
           addproperty="svn-branch-name" />
    <echo message="Creating a new Subversion branch ${svn-branch-name}" />
    <exec executable="svn" failonerror="yes">
      <arg value="copy" />
      <arg value="${basedir}" />
      <arg value="${svn-repository}/branches/${svn-branch-name}" />
      <arg value="-m" />
      <arg value="Created branch ${svn-branch-name}" />
    </exec>
  </target>



  <!-- ***************
       Release Targets
       *************** -->
       
  <target name="release-stable" description="Make a 'stable' version release">
    <antcall target="release">
      <param name="tag-append" value="-stable" />
      <param name="is-development" value="no" />
    </antcall>
  </target>

  <target name="release-beta" description="Make a 'beta' version release">
    <antcall target="release">
      <param name="tag-append" value="-beta" />
      <param name="is-development" value="no" />
    </antcall>
  </target>
       
  <target name="release-local-stable" description="Make a 'stable' version release without touching Subversion">
    <antcall target="release">
      <param name="tag-append" value="-stable" />
      <param name="is-development" value="no" />
      <param name="skip-tag" value="yes" />
    </antcall>
  </target>

  <target name="release-local-beta" description="Make a 'beta' version release without touching Subversion">
    <antcall target="release">
      <param name="tag-append" value="-beta" />
      <param name="is-development" value="no" />
      <param name="skip-tag" value="yes" />
    </antcall>
  </target>
       
  <target name="release-local" description="Make a development release without touching Subversion">
    <antcall target="release">
      <param name="skip-tag" value="yes" />
    </antcall>
  </target>
       
  <target name="release"
          depends="update, build, tag, src-zip, jar-app, javadoc-zip" 
          description="Make a development release">
    <delete dir="${version-tag}" />
  </target>
  
  <target name="src-zip" depends="resolve-version-tag" unless="skip-tag">
    <echo message="Creating ${version-tag}-src.zip" />
    <exec executable="svn" failonerror="yes">
      <arg value="export" />
      <arg value="${svn-repository}/tags/${version-tag}" />
      <arg value="${version-tag}/src" />
    </exec>
    <zip destfile="${version-tag}-src.zip">
      <zipfileset dir="${version-tag}/src" prefix="${version-tag}/src" />
    </zip>
  </target>
  
  <target name="jar-app" depends="jar, assert-jar-exists, resolve-version-tag">
    <echo message="Creating ${version-tag}.jar" />
    <copy file="${ant.project.name}.jar" tofile="${version-tag}.jar" />
  </target>

  <target name="javadoc-zip" depends="javadoc, resolve-version-tag">
    <echo message="Creating ${version-tag}-javadoc.zip" />
    <zip destfile="${version-tag}-javadoc.zip">
      <zipfileset dir="docs/javadoc" prefix="${version-tag}/javadoc" />
    </zip>
  </target>
  
<!--
  <target name="clover-zip" depends="clover, resolve-version-tag">
    <echo message="Creating ${version-tag}-clover.zip" />
    <zip destfile="${version-tag}-clover.zip">
      <zipfileset dir="docs/clover" prefix="${version-tag}/clover" />
    </zip>
  </target>
-->


  <!-- ********************************
       Misc Occasionally-Useful Targets
       ******************************** -->
  
  <patternset id="exclude-binaries">
    <exclude name="**/*.jar" />
    <exclude name="**/*.class" />
    <exclude name="**/DrJava" />
    <exclude name="**/*.png" />
    <exclude name="**/*.icns" />
    <exclude name="**/*.gif" />
    <exclude name="**/*.jpg" />
    <exclude name="**/*.jpeg" />
    <!-- Additional binary types may be added here -->
  </patternset>

  <!-- Run a batch find-and-replace on all text files in the project.
       Assumes the properties "find" and "replace" have been defined
       (e.g. "ant -Dfind=foo -Dreplace=bar find-and-replace"). -->
  <target name="find-and-replace" description="Batch find-and-replace (use '-Dfind=foo -Dreplace=bar')">
    <replace dir="${basedir}" token="${find}" value="${replace}" summary="yes">
      <patternset refid="exclude-binaries" />
    </replace>
  </target>
  
  <!-- Standardize all newline character sequences.  Subversion takes care of this 
       automatically, but sometimes files crop up with the wrong sequence.
       Use "svn status" after running this to see which files were fixed. -->
  <target name="fix-newlines" description="Standardize newline character sequences in all text files">
    <!-- If we're in Windows, use \r\n -->
    <condition property="newline-code" value="crlf">
      <os family="windows" />
    </condition>
    <!-- Otherwise, use \n -->
    <property name="newline-code" value="lf" />
    <fixcrlf srcdir="${basedir}" eol="${newline-code}" fixlast="no">
      <patternset refid="exclude-binaries" />
    </fixcrlf>
  </target>
  
  <!-- Replace the header of each .java source file with the contents of LICENSE, delimited by
       BEGIN_COPYRIGHT_BLOCK and END_COPYRIGHT_BLOCK. -->
  <target name="relicense" description="Paste the contents of LICENSE in all Java source files">
    <loadfile property="license" srcfile="LICENSE" />
    <!-- First, add an empty block to files that don't have a license block. -->
    <replaceregexp match="^package"
                   replace="/*BEGIN_COPYRIGHT_BLOCK* *END_COPYRIGHT_BLOCK*/${line.separator}${line.separator}package">
      <fileset dir="src">
        <include name="**/*.java" />
      </fileset>
    </replaceregexp>
    <replaceregexp flags="s" match="BEGIN_COPYRIGHT_BLOCK.*END_COPYRIGHT_BLOCK"
                   replace="BEGIN_COPYRIGHT_BLOCK*${line.separator}${line.separator}${license}${line.separator}*END_COPYRIGHT_BLOCK">
      <fileset dir="src">
        <include name="**/*.java" />
      </fileset>
    </replaceregexp>
  </target>
  
  <!-- ***************************
       Property-resolution Targets 
       *************************** -->
  
  <target name="resolve-java6-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java6-runtime will only be set the *first* time. -->

    <property name="java6-runtime-1" location="${java6-home}/lib/rt.jar" />
    <available property="java6-runtime" value="${java6-runtime-1}" file="${java6-runtime-1}" />

    <property name="java6-runtime-2" location="${java6-home}/jre/lib/rt.jar" />
    <available property="java6-runtime" value="${java6-runtime-2}" file="${java6-runtime-2}" />

    <property name="java6-runtime-3" location="${java6-home}/../Classes/classes.jar" />
    <available property="java6-runtime" value="${java6-runtime-3}" file="${java6-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 6 home: ${java6-home}" unless="java6-runtime" />
  </target>
  
  <target name="resolve-java6-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="java6-exec-1" location="${java6-home}/bin/java.exe" />
    <condition property="java6-exec" value="${java6-exec-1}">
      <and>
        <available file="${java6-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="java6-exec-2" location="${java6-home}/bin/java" />
    <available property="java6-exec" value="${java6-exec-2}" file="${java6-exec-2}" />

    <fail message="Can't find the java executable in the Java 6 home: ${java6-home}" unless="java6-exec" />
  </target>
  
  <target name="resolve-java7-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java7-runtime will only be set the *first* time. -->

    <property name="java7-runtime-1" location="${java7-home}/lib/rt.jar" />
    <available property="java7-runtime" value="${java7-runtime-1}" file="${java7-runtime-1}" />

    <property name="java7-runtime-2" location="${java7-home}/jre/lib/rt.jar" />
    <available property="java7-runtime" value="${java7-runtime-2}" file="${java7-runtime-2}" />

    <property name="java7-runtime-3" location="${java7-home}/../Classes/classes.jar" />
    <available property="java7-runtime" value="${java7-runtime-3}" file="${java7-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 7 home: ${java7-home}" unless="java7-runtime" />
  </target>
  
  <target name="resolve-java7-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="java7-exec-1" location="${java7-home}/bin/java.exe" />
    <condition property="java7-exec" value="${java7-exec-1}">
      <and>
        <available file="${java7-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="java7-exec-2" location="${java7-home}/bin/java" />
    <available property="java7-exec" value="${java7-exec-2}" file="${java7-exec-2}" />

    <fail message="Can't find the java executable in the Java 7 home: ${java7-home}" unless="java7-exec" />
  </target>
  
  
  <target name="assert-jar-exists">
    <available property="jar-exists" file="${ant.project.name}.jar" />
    <fail message="Can't find ${ant.project.name}.jar" unless="jar-exists" />
  </target>
  
<!--  <target name="assert-clover-jar-exists">
    <available property="clover-jar-exists" file="${clover-jar}" />
    <fail message="${clover-jar} does not exist" unless="clover-jar-exists" />
  </target>
-->
  
  <target name="assert-findbugs-exists">
    <available property="findbugs-exists" file="${findbugs-home}/lib/findbugs.jar" />
    <fail message="${findbugs-home}/lib/findbugs.jar does not exist" unless="findbugs-exists" />
  </target>
  
  
  <target name="resolve-development-value">
    <condition property="development-value" value="true">
      <istrue value="${is-development}" />
    </condition>
    <!-- else... -->
    <property name="development-value" value="false" />
  </target>
  
  <target name="resolve-jvm-args">
    <condition property="jvm-args" value="-server">
      <istrue value="${force-server}" />
    </condition>
    <!-- else... -->
    <property name="jvm-args" value="" />
  </target>
  
  <target name="resolve-test-formatter-class">
    <condition property="test-formatter-class"
               value="edu.rice.cs.plt.ant.QuietJUnitResultFormatter">
      <equals arg1="quiet" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="edu.rice.cs.plt.ant.OneLineJUnitResultFormatter">
      <equals arg1="oneline" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter">
      <equals arg1="brief" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.PlainJUnitResultFormatter">
      <equals arg1="plain" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter">
      <equals arg1="xml" arg2="${test-formatter}" />
    </condition>
    <!-- else... -->
    <property name="test-formatter-class"
              value="edu.rice.cs.plt.ant.OneLineJUnitResultFormatter" />
  </target>
  
  <target name="resolve-version-tag" depends="resolve-svn-revision">
    <!-- Get a timestamp based on GMT, rather than local time -->
    <tstamp>
      <format property="DSTAMP" pattern="yyyyMMdd" timezone="GMT" />
      <format property="TSTAMP" pattern="HHmm" timezone="GMT" />
      <format property="TODAY" pattern="MMMM dd yyyy" timezone="GMT" />
    </tstamp>
    <property name="version-tag"
              value="${ant.project.name}${tag-append}-${DSTAMP}-r${svn-revision}" />
  </target>  

  <!-- Sets is-modified if "svn status" has non-empty output. -->
  <target name="resolve-is-modified" depends="clean">
    <exec executable="svn" failonerror="yes" outputproperty="svn-status">
      <arg value="status" />
    </exec>
    <condition property="is-modified">
      <not>
        <equals arg1="${svn-status}" arg2="" />
      </not>
    </condition>
  </target>
  
  <!-- Sets svn-revision to the current "Last Changed Rev" of "svn info". -->
  <target name="resolve-svn-revision">
  <!-- do nothing -->
  </target>
  
<!-- superseded old code
  <!- Sets svn-revision to the current "Last Changed Rev" of "svn info". ->
  <target name="resolve-svn-revision">
    <exec executable="svn" failonerror="yes" output="svn-info.txt">
      <arg value="info" />
    </exec>
    <loadfile property="svn-revision" srcfile="svn-info.txt">
      <filterchain>
        <linecontains>
          <contains value="Last Changed Rev: " />
        </linecontains>
        <replacestring from="Last Changed Rev: " to="" />
        <striplinebreaks/>
      </filterchain>
    </loadfile>
    <delete file="svn-info.txt" />
  </target>
-->

  <!-- Sets "already-generated" if "generate-file" is more recent than "generate-sourcefile";
       otherwise, the out-of-date target file is deleted (if it exists).  Note that, since
       properties can only be set once, this should happen underneath an "antcall". -->
  <target name="check-generate-file-from-file">
    <dependset>
      <srcfilelist dir="${basedir}" files="${generate-sourcefile}" />
      <targetfilelist dir="${basedir}" files="${generate-file}" />
    </dependset>
    <available file="${generate-file}" property="already-generated" />
  </target>

  <!-- Sets "already-generated" if "generate-file" is more recent than everything in
       "generate-sourcedir"; otherwise, the out-of-date target file is deleted (if it exists).
        Note that, since properties can only be set once, this should happen underneath an "antcall". -->
  <target name="check-generate-file-from-dir">
    <dependset>
      <srcfileset dir="${generate-sourcedir}" />
      <targetfilelist dir="${basedir}" files="${generate-file}" />
    </dependset>
    <available file="${generate-file}" property="already-generated" />
  </target>

  <!-- Sets "already-generated" if "generate-dir" was created (or modified) more recently 
       than "generate-sourcefile".  Note that, since properties can only be set once, this 
       should happen underneath an "antcall". -->
  <target name="check-generate-dir-from-file">
    <uptodate property="already-generated" targetfile="${generate-dir}" srcfile="${generate-sourcefile}" />
  </target>
  
  <!-- Sets "already-generated" if "generate-dir" was created (or modified) more recently 
       than everything in "generate-sourcedir".  Note that, since properties can only be 
       set once, this should happen underneath an "antcall". -->
  <target name="check-generate-dir-from-dir">
    <!-- Unfortunately, a bug in uptodate prevents this from working properly,
         so we just have to equate *existence* with being up to date.
    <uptodate property="already-generated" targetfile="${generate-dir}" >
      <srcfiles dir="${generate-sourcedir}" />
    </uptodate>
    -->
    <available file="${generate-dir}" property="already-generated" />
  </target>


</project>

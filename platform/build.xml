<!-- DrJava Platform-Specific Classes Build Script -->

<!-- This build script is based on the template located at "trunk/misc/build-template.xml"
     in the DrJava Subversion repository.  In general, changes made to the script should be
     reflected in the template as well. -->
     
<!-- To add an additional platform type, the following should be done:
     - Create a 'compile-foo' target
     - Create a 'test-foo' target
     - Add the 'classes/base-foo' directory to the 'jar-full' and 'jar' targets
     - Add the 'classes/test-foo' directory to the 'clean-intermediate' target
     -->
     
<project name="platform" default="help">

  <property name="readable-project-name" value="DrJava Platform-Specific Classes" />

  <!-- Properties loaded from a file -->
  <property name="props" value="../ant.properties" />
  <property file="${props}" />

  <!-- Default settings for properties -->
  <property name="test-spec" value="*" />
  <property name="test-repeat" value="1" />
  <property name="test-timeout" value="1440" />
  <property name="test-formatter" value="oneline" />
  <property name="test-halt" value="false" />
  <property name="force-server" value="no" />
  <property name="debug" value="void" />
  <property name="plt.debug.log" value="${debug}" />
  <property name="error" value="stderr" />
  <property name="plt.error.log" value="${error}" />
  <property name="clean-can-fail" value="yes" /> 
  <property name="drjava-jar" value="${env.DRJAVA_JAR}" />  

  <!-- *** Environment properties that are not needed may be removed *** -->
  <property environment="env" />
  <property name="java5-home" value="${env.JAVA5_HOME}" />
  <property name="java6-home" value="${env.JAVA6_HOME}" />
  <property name="java7-home" value="${env.JAVA7_HOME}" />
  <property name="openjdk6-home" value="${env.OPENJDK6_HOME}" />
  <property name="mint-home" value="${env.MINT_HOME}" />
  <property name="nextgen-home" value="${env.NGC_HOME}" />
  <property name="hj-home" value="${env.HJ_HOME}" />
  
  <property name="is-development" value="yes" /> <!-- Development or stable release -->
  <property name="tag-append" value="" /> <!-- "stable", "beta", or none -->
  
  <!-- Don't use or inherit the CLASSPATH environment variable for anything -->
  <property name="build.sysclasspath" value="ignore" />
  
  <!-- Extension that defines the "extendclasspath" task.  This should be a standard feature of Ant, but
       as long as it's not, we can use this extension from the Clover developers. -->
  <taskdef resource="com/cenqua/ant/antlib.xml" classpath="lib/buildlib/cenquatasks.jar" />

  <!-- Extension containing various tools, including "for" and "if" -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="lib/buildlib/ant-contrib.jar"/>

  <!-- fornum task, used for test-repeat -->
  <taskdef name="fornum" classname="edu.rice.cs.plt.ant.ForNumTask" classpath="lib/buildlib/plt-ant.jar" onerror="report" />
  
  <extendclasspath path="lib/buildlib/junit.jar" />

  <fileset id="libs" dir="lib" includes="*.jar" /> <!-- Only include jars that are at the top level (not in buildlib) -->
  
  
  
  <!-- ************
       Help Targets
       ************ -->
  
  <target name="help" description="Print general build script information">
    <echo message="----------------------------------------------------------------------" />
    <echo message="${readable-project-name} Build Scripts" />
    <echo message="----------------------------------------------------------------------" />
    <echo message="Type 'ant -projecthelp' or 'ant -p' to see the list of targets." />
    <echo message="Type 'ant options' to see the list of customizable options." />
    <echo message="" />
    <echo message="For this build file to function properly, the following environment" />
    <echo message="variables may need to be defined (depending on the target invoked):" />
    <echo message="PATH: The 'javac' command is used for compilation;" />
    <echo message="      the 'java' command is used by default in testing/running; " />
    <echo message="DRJAVA_JAR: Location of the drjava.jar file (most classes here " />
    <echo message="            implement interfaces defined there)." />
    <echo message="JAVA5_HOME: Home folder of the Java 5 JDK" />
    <echo message="JAVA6_HOME: Home folder of the Java 6 JDK" />
    <echo message="JAVA7_HOME: Home folder of the Java 7 JDK" />
    <echo message="OPENJDK6_HOME: Home folder of the OpenJDK 6" />
    <echo message="MINT_HOME: Home folder of the Mint distribution" />
    <echo message="NEXTGEN_HOME: Home folder of the NextGen distribution" />
    <echo message="HJ_HOME: Home folder of the Habanero Java distribution" />
    <echo message="" />
    <echo message="For control over the version of Java used to run Ant, set JAVA_HOME." />
    <echo message="Ant may also require ANT_HOME to be set.  Note that the value of " />
    <echo message="CLASSPATH will be ignored -- classes on the system class path will " />
    <echo message="not be visible during the build process." />
    <echo message="" />
    <echo message="IMPORTANT: The usual pattern of comprehensive testing before a commit " />
    <echo message="and automatic compilation before generating a jar file cannot be " />
    <echo message="followed here, because the sources generally can't be compiled all at " />
    <echo message="once.  Care must be taken to invoke the appropriate sequence of targets " />
    <echo message="to produce the desired result." />
  </target>
  
  <!-- *** Modify with any project-specific customizable options *** -->
  <target name="options" description="Print the list of customizable options">
    <echo message="----------------------------------------------------------------------" />
    <echo message="${readable-project-name} Build Script Customizable Options" />
    <echo message="----------------------------------------------------------------------" />
    <echo message="The following properties control custom behavior.  They may be defined " />
    <echo message="on the command line ('-Dname=value'), in a properties file (named " />
    <echo message="'../ant.properties' by default, and containing 'name=value' pairs on " />
    <echo message="each line), or in the ANT_ARGS environment variable (using " />
    <echo message="'-Dname=value')." />
    <echo message="" />
    <echo message="props: An external properties file (default: 'ant.properties')" />
    <echo message="test-spec: A matching string for filtering the tests to be run; may be" />
    <echo message="           comma-delimited to run multiple test sets" />
    <echo message="test-repeat: The number of times the tests should be repeated" />
    <echo message="test-timeout: A time limit (in minutes) for running a test set" />
    <echo message="test-formatter: The kind of formatter to use for test results: one of" />
    <echo message="                 'quiet', 'oneline', 'brief', 'plain', or 'xml'" />
    <echo message="                (default: oneline)" />
    <echo message="test-halt: Whether unit testing should stop after the *first* failure"/>
    <echo message="           (default: no)" />
    <echo message="skip-test: Define to indicate that testing should be silently skipped" />
    <echo message="skip-clean: Define to indicate that cleaning should be silently skipped" />
    <echo message="skip-tag: Define to indicate that tagging should be silently skipped" />
    <echo message="force-server: Whether the '-server' option should always be used when" />
    <echo message="              testing (Default: no)" />
    <echo message="clean-can-fail: Whether the failure of a 'clean' operation can halt" />
    <echo message="                the build (default: yes)" />
    <echo message="debug: Type of the debug log when running or testing: one of 'stdout'," />
    <echo message="       'stderr', 'file', 'assert', 'popup', 'tree', or 'void'" />
    <echo message="       (equivalent to setting the property 'plt.debug.log'; default: " />
    <echo message="       void)" />
    <echo message="error: Type of the error log when running or testing: one of 'stdout'," />
    <echo message="       'stderr', 'file', 'assert', 'popup', 'tree', or 'void'" />
    <echo message="       (equivalent to setting the property 'plt.error.log'; default: " />
    <echo message="       stderr)" />
  </target>

  
  
  <!-- *******************
       Compilation Targets
       ******************* -->
       
  <!-- In general, we prefer using the Java 5 language and APIs for compilation.  Where
       that is not possible, later versions are used.  Note that if there are dependencies on
       later APIs, the DrJava application is responsible for ensuring that those classes are 
       only loaded when the necessary APIs are available. -->
       
  <target name="compile-jdk5" depends="resolve-java5-runtime, resolve-java5-tools" 
          description="Compile the 'jdk5' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="jdk5" />
      <param name="source-version" value="1.5" />
      <param name="runtime-jar" value="${java5-runtime}" />
      <param name="extra-classpath" value="${java5-tools}" />
    </antcall>
  </target>
  
  <target name="compile-jdk6" depends="resolve-java6-runtime, resolve-java6-tools" 
          description="Compile the 'jdk6' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="jdk6" />
      <param name="source-version" value="1.6" />
      <param name="runtime-jar" value="${java6-runtime}" />
      <param name="extra-classpath" value="${java6-tools}" />
    </antcall>
  </target>
  
  <target name="compile-jdk7" depends="resolve-java7-runtime, resolve-java7-tools" 
          description="Compile the 'jdk7' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="jdk7" />
      <param name="source-version" value="1.7" />
      <param name="runtime-jar" value="${java7-runtime}" />
      <param name="extra-classpath" value="${java7-tools}" />
    </antcall>
  </target>
  
  <target name="compile-openjdk6" depends="resolve-openjdk6-runtime, resolve-openjdk6-tools" 
          description="Compile the 'openjdk6' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="openjdk6" />
      <param name="source-version" value="1.6" />
      <param name="runtime-jar" value="${openjdk6-runtime}" />
      <param name="extra-classpath" value="${openjdk6-tools}" />
    </antcall>
  </target>

  <target name="compile-mint" depends="resolve-java6-runtime, resolve-mint-tools" 
          description="Compile the 'mint' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="mint" />
      <param name="source-version" value="1.6" />
      <param name="runtime-jar" value="${java6-runtime}" />
      <param name="extra-classpath" value="${mint-tools}" />
    </antcall>
  </target>

  <target name="compile-nextgen" depends="resolve-java5-runtime, resolve-nextgen-tools" 
          description="Compile the 'nextgen' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="nextgen" />
      <param name="source-version" value="1.5" />
      <param name="runtime-jar" value="${java5-runtime}" />
      <param name="extra-classpath" value="${nextgen-tools}" />
    </antcall>
  </target>

  <target name="compile-hj" depends="resolve-java5-runtime, resolve-hj-tools" 
          description="Compile the 'hj' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="hj" />
      <param name="source-version" value="1.5" />
      <param name="runtime-jar" value="${java5-runtime}" />
      <param name="extra-classpath" value="${hj-tools}:${hj-home}/lib/sootclasses-2.3.0.jar:${hj-home}/lib/polyglot.jar:${hj-home}/lib/hjc.jar" />
    </antcall>
  </target>

  <target name="compile-eclipse" depends="resolve-java6-runtime, resolve-java6-tools, unjar-libs" 
          description="Compile the 'eclipse' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="eclipse" />
      <param name="source-version" value="1.6" />
      <param name="runtime-jar" value="${java6-runtime}" />
      <param name="extra-classpath" value="${java6-tools}" />
    </antcall>
  </target>
  
  <target name="compile-mac" depends="resolve-java5-runtime" 
          description="Compile the 'mac' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="mac" />
      <param name="source-version" value="1.5" />
      <param name="runtime-jar" value="${java5-runtime}" />
      <param name="extra-classpath" value="${java5-runtime}/../ui.jar" />
    </antcall>
  </target>
  
  <target name="compile-windows" depends="resolve-java5-runtime" 
          description="Compile the 'windows' sources">
    <antcall target="do-compile">
      <param name="platform-tag" value="windows" />
      <param name="source-version" value="1.5" />
      <param name="runtime-jar" value="${java5-runtime}" />
      <param name="extra-classpath" value="" />
    </antcall>
  </target>
  
  
  <!-- Requires that the properties 'platform-tag', 'source-version', 'runtime-jar', and
       'extra-classpath' be set -->
  <target name="do-compile" depends="assert-drjava-jar-exists">
  
    <echo message="Compiling src-${platform-tag} directory to classes/base-${platform-tag} and classes/test-${platform-tag}" />
    <echo message="with command 'javac'" />
    
    <!-- Make the directories if they don't already exist -->
    <mkdir dir="classes/base-${platform-tag}" />
    <mkdir dir="classes/test-${platform-tag}" />
    <!-- To eliminate confusion, we force recompilation whenever this is invoked -->
    <delete>
      <fileset dir="classes/base-${platform-tag}" includes="**/*" />  
      <fileset dir="classes/test-${platform-tag}" includes="**/*" />  
    </delete>
    
    <javac srcdir="src-${platform-tag}" destdir="classes/base-${platform-tag}" 
           source="${source-version}" target="${source-version}"
           bootclasspath="${runtime-jar}" sourcepath="" includeAntRuntime="no"
           executable="javac" fork="yes" memoryMaximumSize="512M"
           debug="on" optimize="off" deprecation="on">
      <classpath>
        <pathelement path="${extra-classpath}" />
        <fileset refid="libs" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/base-${platform-tag}" />
        <pathelement location="${drjava-jar}" />
      </classpath>
      <compilerarg value="-Xlint" />
      <!-- Ignore serial warnings, because they occur for every Throwable definition (among others) -->
      <compilerarg value="-Xlint:-serial" /> 
      <!-- Use the next line to compile against other sources, ignoring any unneeded classes.
           This can be useful in creating a pruned version of a jar file for the lib directory.
           (You must also clear the sourcepath="" option.)
      <include name="${src-working-dir}/**/*.java" /> -->
    </javac>
    
    <move todir="classes/test-${platform-tag}">
      <fileset dir="classes/base-${platform-tag}">
        <include name="**/*Test.class" />
        <include name="**/*Test$*.class" />
        <include name="**/*TestCase.class" />
        <include name="**/*TestCase$*.class" />
        <!-- Additional test classes should be listed here -->
      </fileset>
    </move>
    
    <antcall target="copy-resources" />
    <antcall target="unjar-libs" />
    
  </target>
  

  <!-- Requires the 'platform-tag' property to be set -->
  <target name="copy-resources">
    <copy todir="classes/base-${platform-tag}">
      <fileset dir="src-${platform-tag}">
        <include name="**/LICENSE" />
        <include name="**/README" />
        <include name="**/*.gif" />
        <include name="**/*.png" />
        <include name="**/*.jpg" />
        <include name="**/*.jpeg" />
        <include name="**/*.properties" />
        <!-- Additional resource files should be listed here -->
      </fileset>
    </copy>
  </target>
  
  
  <target name="unjar-libs">
    <antcall target="do-unjar-libs">
      <param name="generate-sourcedir" value="lib" />
      <param name="generate-dir" value="classes/lib" />
    </antcall>
  </target>
  
  <target name="do-unjar-libs" depends="check-generate-dir-from-dir" unless="already-generated">
    <echo message="Unjarring jar files in the lib directory" />
    <!-- Delete "classes/lib" in case it exists (but is out of date) -->
    <delete dir="classes/lib" />
    <mkdir dir="classes/lib" />
    <unjar dest="classes/lib">
      <fileset refid="libs" />
      <patternset excludes="META-INF/**" />
    </unjar>
  </target>
  
  

  <!-- ***************
       Testing Targets
       *************** -->
  
  <target name="test-jdk5" depends="compile-jdk5, resolve-java5-exec, resolve-java5-tools" 
          description="Run all 'jdk5' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="jdk5" />
      <param name="extra-classpath" value="${java5-tools}" />
      <param name="test-jvm" value="${java5-exec}" />
    </antcall>
  </target>

  <target name="test-jdk6" depends="compile-jdk6, resolve-java6-exec, resolve-java6-tools" 
          description="Run all 'jdk6' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="jdk6" />
      <param name="extra-classpath" value="${java6-tools}" />
      <param name="test-jvm" value="${java6-exec}" />
    </antcall>
  </target>

  <target name="test-jdk7" depends="compile-jdk7, resolve-java7-exec, resolve-java7-tools" 
          description="Run all 'jdk7' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="jdk7" />
      <param name="extra-classpath" value="${java7-tools}" />
      <param name="test-jvm" value="${java7-exec}" />
    </antcall>
  </target>

  <target name="test-openjdk6" depends="compile-openjdk6, resolve-openjdk6-exec, resolve-openjdk6-tools" 
          description="Run all 'openjdk6' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="openjdk6" />
      <param name="extra-classpath" value="${openjdk6-tools}" />
      <param name="test-jvm" value="${openjdk6-exec}" />
    </antcall>
  </target>

  <target name="test-mint" depends="compile-mint, resolve-mint-exec, resolve-mint-tools" 
          description="Run all 'mint' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="mint" />
      <param name="extra-classpath" value="${mint-tools}" />
      <param name="test-jvm" value="${mint-exec}" />
    </antcall>
  </target>

  <target name="test-nextgen" depends="compile-nextgen, resolve-java6-exec, resolve-nextgen-exec, resolve-nextgen-tools" 
          description="Run all 'nextgen' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="nextgen" />
      <param name="extra-classpath" value="${nextgen-tools}" />
      <param name="test-jvm" value="${nextgen-exec}" />
    </antcall>
  </target>

  <target name="test-hj" depends="compile-hj,  resolve-hj-tools" 
          description="Run all 'mint' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="hj" />
      <param name="extra-classpath" value="${hj-tools}" />
      <param name="test-jvm" value="" />
    </antcall>
  </target>

  <target name="test-eclipse" depends="compile-eclipse, resolve-java6-exec, resolve-java6-tools" 
          description="Run all 'eclipse' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="eclipse" />
      <param name="extra-classpath" value="${java6-tools}" />
      <param name="test-jvm" value="${java6-exec}" />
    </antcall>
  </target>

  <target name="test-mac" depends="compile-mac" 
          description="Run all 'mac' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="mac" />
      <param name="extra-classpath" value="" />
      <param name="test-jvm" value="java" />
    </antcall>
  </target>

  <target name="test-windows" depends="compile-windows" 
          description="Run all 'windows' tests (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="platform-tag" value="windows" />
      <param name="extra-classpath" value="" />
      <param name="test-jvm" value="java" />
    </antcall>
  </target>

  
  <target name="iterate-tests" depends="resolve-test-formatter-class">
    <!-- Calls do-test, unless that is overridden by the caller -->
    <property name="do-test-target" value="do-test" />
    <condition property="test-iteration-message">
      <not>
        <equals arg1="${test-repeat}" arg2="1" />
      </not>
    </condition>
    <condition property="test-output-to-file" value="yes" else="no">
      <equals arg1="${test-formatter}" arg2="xml" />
    </condition>
    
    <!-- Repeat tests 'test-repeat' times. -->
    <fornum count="${test-repeat}" param="iteration">
      <sequential>
        <trycatch property="test-failure" reference="test-failure-ref">
        
          <try>
            <for list="${test-spec}" param="test-filter-string-iter">
              <sequential>
                <limit minutes="${test-timeout}" failonerror="true">
                  <antcall target="${do-test-target}">
                    <param name="test-filter-string" value="@{test-filter-string-iter}" />
                  </antcall>
                </limit>
              </sequential>
            </for>
            <if>
              <istrue value="${test-output-to-file}" />
              <then>
                <mkdir dir="testResults/@{iteration}" />
              </then>
            </if>
          </try>
          
          <catch>
            <if>
              <istrue value="${test-halt}" />
              <then>
                <throw refid="test-failure-ref" />
              </then>
            </if>
          </catch>
          
          <finally>
            <if>
              <istrue value="${test-output-to-file}" />
              <then>
                <move todir="testResults/@{iteration}">
                  <fileset dir="${basedir}">
                    <include name="TEST*" />
                  </fileset>
                </move>
              </then>
            </if>
          </finally>
          
        </trycatch>
        
        <if>
          <isset property="test-iteration-message" />
          <then>
            <math result="iteration1" datatype="int"
                  operand1="@{iteration}" operation="+" operand2="1" />
            <echo message="" />
            <echo message="Completed test iteration ${iteration1} of ${test-repeat}" />
          </then>
        </if>
        
      </sequential>
    </fornum>
    
    <!-- Handle errors where test-halt is false -->
    <if>
      <isset property="test-failure" />
      <then>
        <!-- Using 'if="test-failure"' here doesn't seem to work -->
        <throw refid="test-failure-ref" />
      </then>
    </if>
    
  </target>
  
  <!-- Requires that the properties 'platform-tag' and 'extra-classpath' be set -->
  <target name="do-test" depends="assert-drjava-jar-exists, resolve-jvm-args">
    <echo message="Running all ${platform-tag} tests matching '${test-filter-string}' with command '${test-jvm}'" />
    <junit haltonfailure="${test-halt}" failureproperty="test-failed"
           fork="yes" forkmode="perTest" maxmemory="512M" jvm="${test-jvm}" dir="${basedir}">
      <classpath>
        <pathelement path="${extra-classpath}" />
        <pathelement location="lib/buildlib/plt-ant.jar" /> <!-- required for custom formatter -->
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/test-${platform-tag}" />
        <pathelement location="classes/base-${platform-tag}" />
        <pathelement location="classes/lib" />
        <pathelement location="${drjava-jar}" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
        <!-- Add any properties that should be passed on -->
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
      <formatter classname="${test-formatter-class}" usefile="${test-output-to-file}" />
      <batchtest>
        <fileset dir="classes/test-${platform-tag}">
          <filename name="**/*${test-filter-string}*/**" />
          <filename name="**/*Test.class" />
        </fileset>
      </batchtest>
    </junit>
    <fail if="test-failed" message="One or more unit tests failed."/>
  </target>



  <!-- ***********
       Jar Targets
       *********** -->
       
  <target name="jar-full" depends="resolve-version-tag" description="Create the jar file with all classes and libs">
    <delete file="${ant.project.name}-full.jar" failonerror="true"/>
    <jar jarfile="${ant.project.name}-full.jar">
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/lib" />
      <fileset dir="classes/base-jdk5" />
      <fileset dir="classes/base-jdk6" />
      <fileset dir="classes/base-jdk7" />
      <fileset dir="classes/base-openjdk6" />
      <fileset dir="classes/base-mint" />
      <fileset dir="classes/base-nextgen" />
      <fileset dir="classes/base-hj" />
      <fileset dir="classes/base-eclipse" />
      <fileset dir="classes/base-mac" />
      <fileset dir="classes/base-windows" />
      <!-- Additional platform types should be listed here -->
    </jar>
  </target>

  <target name="jar" depends="resolve-version-tag" description="Create the jar file without any support libs">
    <delete file="${ant.project.name}.jar" failonerror="true"/>
    <jar jarfile="${ant.project.name}.jar">
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/base-jdk5" />
      <fileset dir="classes/base-jdk6" />
      <fileset dir="classes/base-jdk7" />
      <fileset dir="classes/base-openjdk6" />
      <fileset dir="classes/base-mint" />
      <fileset dir="classes/base-nextgen" />
      <fileset dir="classes/base-hj" />
      <fileset dir="classes/base-eclipse" />
      <fileset dir="classes/base-mac" />
      <fileset dir="classes/base-windows" />
      <!-- Additional platform types should be listed here -->
    </jar>
  </target>


  <!-- *************
       Clean Targets
       ************* -->
       
  <target name="clean" depends="clean-intermediate, clean-products"
          description="Remove all build products; the result should match the intended Subversion contents">
  </target>

  <target name="clean-intermediate" unless="skip-clean">
    <echo message="Deleting all intermediate build products" />
    
    <delete dir="classes/lib" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-jdk5" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-jdk6" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-jdk7" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-openjdk6" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-mint" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-nextgen" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-hj" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-eclipse" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-mac" failonerror="${clean-can-fail}" />
    <delete dir="classes/test-windows" failonerror="${clean-can-fail}" />
    
    <delete includeemptydirs="true" failonerror="${clean-can-fail}">
      <fileset dir="testFiles">
        <include name="**/*.class" />
        <!-- Additional test output files should be listed here -->
      </fileset>
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="TEST*" />
        <include name="src-*/**/*.class" />
        <!-- <include name="**/*~" /> -->
        <!-- Get rid of pesky OS helper files (doesn't work if defaultexcludes is "yes") -->
        <include name="**/.DS_Store" />
        <include name="**/Thumbs.db" />
        <!-- Additional files to delete may be listed here -->
      </fileset>
    </delete>
    
  </target>
  
  <target name="clean-products" unless="skip-clean">
    <echo message="Deleting all final build products" />
    
    <delete dir="testResults" failonerror="${clean-can-fail}" />
    
    <delete includeemptydirs="true" failonerror="${clean-can-fail}">
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="*.jar" />
        <include name="*.zip" />
        <include name="*.tar.gz" />
        <include name="*.exe" />
      </fileset>
    </delete>
    
  </target>




  <!-- ***************
       Release Targets
       *************** -->
       
  <target name="release-stable" description="Make a 'stable' version release">
    <antcall target="release">
      <param name="tag-append" value="-stable" />
      <param name="is-development" value="no" />
    </antcall>
  </target>

  <target name="release-beta" description="Make a 'beta' version release">
    <antcall target="release">
      <param name="tag-append" value="-beta" />
      <param name="is-development" value="no" />
    </antcall>
  </target>
       
  <target name="release-local-stable" description="Make a 'stable' version release without touching Subversion">
    <antcall target="release">
      <param name="tag-append" value="-stable" />
      <param name="is-development" value="no" />
      <param name="skip-tag" value="yes" />
    </antcall>
  </target>

  <target name="release-local-beta" description="Make a 'beta' version release without touching Subversion">
    <antcall target="release">
      <param name="tag-append" value="-beta" />
      <param name="is-development" value="no" />
      <param name="skip-tag" value="yes" />
    </antcall>
  </target>
       
  <target name="release-local" description="Make a development release without touching Subversion">
    <antcall target="release">
      <param name="skip-tag" value="yes" />
    </antcall>
  </target>
       
  <target name="jar-app" depends="jar, assert-jar-exists, resolve-version-tag">
    <echo message="Creating ${version-tag}.jar" />
    <copy file="${ant.project.name}.jar" tofile="${version-tag}.jar" />
  </target>



  <!-- ********************************
       Misc Occasionally-Useful Targets
       ******************************** -->
  
  <patternset id="exclude-binaries">
    <exclude name="**/*.jar" />
    <exclude name="**/*.class" />
    <exclude name="**/DrJava" />
    <exclude name="**/*.png" />
    <exclude name="**/*.icns" />
    <exclude name="**/*.gif" />
    <exclude name="**/*.jpg" />
    <exclude name="**/*.jpeg" />
    <!-- Additional binary types may be added here -->
  </patternset>

  <!-- Run a batch find-and-replace on all text files in the project.
       Assumes the properties "find" and "replace" have been defined
       (e.g. "ant -Dfind=foo -Dreplace=bar find-and-replace"). -->
  <target name="find-and-replace" description="Batch find-and-replace (use '-Dfind=foo -Dreplace=bar')">
    <replace dir="${basedir}" token="${find}" value="${replace}" summary="yes">
      <patternset refid="exclude-binaries" />
    </replace>
  </target>
  
  <!-- Standardize all newline character sequences.  Subversion takes care of this 
       automatically, but sometimes files crop up with the wrong sequence.
       Use "git status" after running this to see which files were fixed. -->
  <target name="fix-newlines" description="Standardize newline character sequences in all text files">
    <!-- If we're in Windows, use \r\n -->
    <condition property="newline-code" value="crlf">
      <os family="windows" />
    </condition>
    <!-- Otherwise, use \n -->
    <property name="newline-code" value="lf" />
    <fixcrlf srcdir="${basedir}" eol="${newline-code}" fixlast="no">
      <patternset refid="exclude-binaries" />
    </fixcrlf>
  </target>
  
  <!-- Replace the header of each .java source file with the contents of LICENSE, delimited by
       BEGIN_COPYRIGHT_BLOCK and END_COPYRIGHT_BLOCK. -->
  <target name="relicense" description="Paste the contents of LICENSE in all Java source files">
    <loadfile property="license" srcfile="LICENSE" />
    <!-- First, add an empty block to files that don't have a license block. -->
    <replaceregexp match="^package"
                   replace="/*BEGIN_COPYRIGHT_BLOCK* *END_COPYRIGHT_BLOCK*/${line.separator}${line.separator}package">
      <fileset dir="${basedir}">
        <include name="src-*/**/*.java" />
      </fileset>
    </replaceregexp>
    <replaceregexp flags="s" match="BEGIN_COPYRIGHT_BLOCK.*END_COPYRIGHT_BLOCK"
                   replace="BEGIN_COPYRIGHT_BLOCK*${line.separator}${line.separator}${license}${line.separator}*END_COPYRIGHT_BLOCK">
      <fileset dir="${basedir}">
        <include name="src-*/**/*.java" />
      </fileset>
    </replaceregexp>
  </target>

  
  
  <!-- ***************************
       Property-resolution Targets 
       *************************** -->
  
  <target name="resolve-java5-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java5-runtime will only be set the *first* time. -->

    <property name="java5-runtime-1" location="${java5-home}/lib/rt.jar" />
    <available property="java5-runtime" value="${java5-runtime-1}" file="${java5-runtime-1}" />

    <property name="java5-runtime-2" location="${java5-home}/jre/lib/rt.jar" />
    <available property="java5-runtime" value="${java5-runtime-2}" file="${java5-runtime-2}" />

    <property name="java5-runtime-3" location="${java5-home}/../Classes/classes.jar" />
    <available property="java5-runtime" value="${java5-runtime-3}" file="${java5-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 5 home: ${java5-home}" unless="java5-runtime" />
  </target>
  
  <target name="resolve-java5-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="java5-exec-1" location="${java5-home}/bin/java.exe" />
    <condition property="java5-exec" value="${java5-exec-1}">
      <and>
        <available file="${java5-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="java5-exec-2" location="${java5-home}/bin/java" />
    <available property="java5-exec" value="${java5-exec-2}" file="${java5-exec-2}" />

    <fail message="Can't find the java executable in the Java 5 home: ${java5-home}" unless="java5-exec" />
  </target>
  
  <target name="resolve-java5-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java5-tools will only be set the *first* time. -->

    <property name="java5-tools-1" location="${java5-home}/lib/tools.jar" />
    <available property="java5-tools" value="${java5-tools-1}" file="${java5-tools-1}" />

    <property name="java5-tools-2" location="${java5-home}/jre/lib/tools.jar" />
    <available property="java5-tools" value="${java5-tools-2}" file="${java5-tools-2}" />

    <property name="java5-tools-3" location="${java5-home}/../Classes/classes.jar" />
    <available property="java5-tools" value="${java5-tools-3}" file="${java5-tools-3}" />

    <fail message="Can't find tools.jar in the Java 5 home: ${java5-home}" unless="java5-tools" />
  </target>
  
  
  <target name="resolve-java6-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java6-runtime will only be set the *first* time. -->

    <property name="java6-runtime-1" location="${java6-home}/lib/rt.jar" />
    <available property="java6-runtime" value="${java6-runtime-1}" file="${java6-runtime-1}" />

    <property name="java6-runtime-2" location="${java6-home}/jre/lib/rt.jar" />
    <available property="java6-runtime" value="${java6-runtime-2}" file="${java6-runtime-2}" />

    <property name="java6-runtime-3" location="${java6-home}/../Classes/classes.jar" />
    <available property="java6-runtime" value="${java6-runtime-3}" file="${java6-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 6 home: ${java6-home}" unless="java6-runtime" />
  </target>
  
  <target name="resolve-java6-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="java6-exec-1" location="${java6-home}/bin/java.exe" />
    <condition property="java6-exec" value="${java6-exec-1}">
      <and>
        <available file="${java6-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="java6-exec-2" location="${java6-home}/bin/java" />
    <available property="java6-exec" value="${java6-exec-2}" file="${java6-exec-2}" />

    <fail message="Can't find the java executable in the Java 6 home: ${java6-home}" unless="java6-exec" />
    <echo message="${java6-exec}"/>
  </target>
  
  <target name="resolve-java6-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java6-tools will only be set the *first* time. -->

    <property name="java6-tools-1" location="${java6-home}/lib/tools.jar" />
    <available property="java6-tools" value="${java6-tools-1}" file="${java6-tools-1}" />

    <property name="java6-tools-2" location="${java6-home}/jre/lib/tools.jar" />
    <available property="java6-tools" value="${java6-tools-2}" file="${java6-tools-2}" />

    <property name="java6-tools-3" location="${java6-home}/../Classes/classes.jar" />
    <available property="java6-tools" value="${java6-tools-3}" file="${java6-tools-3}" />

    <fail message="Can't find tools.jar in the Java 6 home: ${java6-home}" unless="java6-tools" />
  </target>

  <target name="resolve-java7-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java7-runtime will only be set the *first* time. -->

    <property name="java7-runtime-1" location="${java7-home}/lib/rt.jar" />
    <available property="java7-runtime" value="${java7-runtime-1}" file="${java7-runtime-1}" />

    <property name="java7-runtime-2" location="${java7-home}/jre/lib/rt.jar" />
    <available property="java7-runtime" value="${java7-runtime-2}" file="${java7-runtime-2}" />

    <property name="java7-runtime-3" location="${java7-home}/../Classes/classes.jar" />
    <available property="java7-runtime" value="${java7-runtime-3}" file="${java7-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 7 home: ${java7-home}" unless="java7-runtime" />
  </target>
  
  <target name="resolve-java7-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="java7-exec-1" location="${java7-home}/bin/java.exe" />
    <condition property="java7-exec" value="${java7-exec-1}">
      <and>
        <available file="${java7-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="java7-exec-2" location="${java7-home}/bin/java" />
    <available property="java7-exec" value="${java7-exec-2}" file="${java7-exec-2}" />

    <fail message="Can't find the java executable in the Java 7 home: ${java7-home}" unless="java7-exec" />
    <echo message="${java7-exec}"/>
  </target>
  
  <target name="resolve-java7-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java7-tools will only be set the *first* time. -->

    <property name="java7-tools-1" location="${java7-home}/lib/tools.jar" />
    <available property="java7-tools" value="${java7-tools-1}" file="${java7-tools-1}" />

    <property name="java7-tools-2" location="${java7-home}/jre/lib/tools.jar" />
    <available property="java7-tools" value="${java7-tools-2}" file="${java7-tools-2}" />

    <property name="java7-tools-3" location="${java7-home}/../Classes/classes.jar" />
    <available property="java7-tools" value="${java7-tools-3}" file="${java7-tools-3}" />

    <fail message="Can't find tools.jar in the Java 7 home: ${java7-home}" unless="java7-tools" />
  </target>

  <target name="resolve-openjdk6-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so openjdk6-runtime will only be set the *first* time. -->

    <property name="openjdk6-runtime-1" location="${openjdk6-home}/lib/rt.jar" />
    <available property="openjdk6-runtime" value="${openjdk6-runtime-1}" file="${openjdk6-runtime-1}" />

    <property name="openjdk6-runtime-2" location="${openjdk6-home}/jre/lib/rt.jar" />
    <available property="openjdk6-runtime" value="${openjdk6-runtime-2}" file="${openjdk6-runtime-2}" />

    <property name="openjdk6-runtime-3" location="${openjdk6-home}/../Classes/classes.jar" />
    <available property="openjdk6-runtime" value="${openjdk6-runtime-3}" file="${openjdk6-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 6 home: ${openjdk6-home}" unless="openjdk6-runtime" />
  </target>
  
  <target name="resolve-openjdk6-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="openjdk6-exec-1" location="${openjdk6-home}/bin/java.exe" />
    <condition property="openjdk6-exec" value="${openjdk6-exec-1}">
      <and>
        <available file="${openjdk6-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="openjdk6-exec-2" location="${openjdk6-home}/bin/java" />
    <available property="openjdk6-exec" value="${openjdk6-exec-2}" file="${openjdk6-exec-2}" />

    <fail message="Can't find the java executable in the Java 6 home: ${openjdk6-home}" unless="openjdk6-exec" />
  </target>
  
  <target name="resolve-openjdk6-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so openjdk6-tools will only be set the *first* time. -->

    <property name="openjdk6-tools-1" location="${openjdk6-home}/lib/tools.jar" />
    <available property="openjdk6-tools" value="${openjdk6-tools-1}" file="${openjdk6-tools-1}" />

    <property name="openjdk6-tools-2" location="${openjdk6-home}/jre/lib/tools.jar" />
    <available property="openjdk6-tools" value="${openjdk6-tools-2}" file="${openjdk6-tools-2}" />

    <property name="openjdk6-tools-3" location="${openjdk6-home}/../Classes/classes.jar" />
    <available property="openjdk6-tools" value="${openjdk6-tools-3}" file="${openjdk6-tools-3}" />

    <fail message="Can't find tools.jar in the Java 6 home: ${openjdk6-home}" unless="openjdk6-tools" />
  </target>

  <!-- No resolve-mint-runtime, use resolve-java6-runtime -->

  <target name="resolve-mint-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="mint-exec-1" location="${mint-home}/langtools/bin/mint.bat" />
    <condition property="mint-exec" value="${mint-exec-1}">
      <and>
        <available file="${mint-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <if>
      <not><isset property="mint-exec" /></not>
      <then>
        <property name="mint-exec-2" location="${mint-home}/langtools/bin/mint" />
        <available property="mint-exec" value="${mint-exec-2}" file="${mint-exec-2}" />
      </then>
    </if>

    <fail message="Can't find the java executable in the Mint home: ${mint-home}" unless="mint-exec" />
    <echo message="${mint-exec}"/>
  </target>
  
  <target name="resolve-mint-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so mint-tools will only be set the *first* time. -->

    <property name="mint-tools-1" location="${mint-home}/langtools/dist/lib/classes.jar" />
    <available property="mint-tools" value="${mint-tools-1}" file="${mint-tools-1}" />

    <fail message="Can't find classes.jar in the Mint home: ${mint-home}" unless="mint-tools" />
  </target>
  
  <!-- No resolve-nextgen-runtime, use resolve-java6-runtime -->

  <target name="resolve-nextgen-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="nextgen-exec-1" location="${nextgen-home}/bin/nextgen.bat" />
    <condition property="nextgen-exec" value="${nextgen-exec-1}">
      <and>
        <available file="${nextgen-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <if>
      <not><isset property="nextgen-exec" /></not>
      <then>
        <property name="nextgen-exec-2" location="${nextgen-home}/bin/nextgen" />
        <available property="nextgen-exec" value="${nextgen-exec-2}" file="${nextgen-exec-2}" />
      </then>
    </if>

    <fail message="Can't find the java executable in the Nextgen home: ${nextgen-home}" unless="nextgen-exec" />
    <echo message="${nextgen-exec}"/>
  </target>
  
  <target name="resolve-nextgen-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so nextgen-tools will only be set the *first* time. -->

    <property name="nextgen-tools-1" location="${nextgen-home}/nextgen2.jar" />
    <available property="nextgen-tools" value="${nextgen-tools-1}" file="${nextgen-tools-1}" />

    <property name="nextgen-tools-2" location="${nextgen-home}/jars/nextgen2.jar" />
    <available property="nextgen-tools" value="${nextgen-tools-2}" file="${nextgen-tools-2}" />

    <property name="nextgen-tools-3" location="${nextgen-home}/built" />
    <available property="nextgen-tools" value="${nextgen-tools-3}" file="${nextgen-tools-3}/edu/rice/cs/nextgen2/compiler/Main.class" />

    <fail message="Can't find nextgen2.jar in the Nextgen home: ${nextgen-home}" unless="nextgen-tools" />
  </target>

  <target name="resolve-hj-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so hj-tools will only be set the *first* time. -->

    <property name="hj-tools-1" location="${hj-home}/lib/hj.jar" />
    <available property="hj-tools" value="${hj-tools-1}" file="${hj-tools-1}" />

    <fail message="Can't find hj.jar in the hj home: ${hj-home}" unless="hj-tools" />
  </target>
  
  <target name="assert-jar-exists">
    <available property="jar-exists" file="${ant.project.name}.jar" />
    <fail message="Can't find ${ant.project.name}.jar" unless="jar-exists" />
  </target>
  
  <target name="assert-drjava-jar-exists">
    <available property="drjava-jar-exists" file="${drjava-jar}" />
    <fail message="${drjava-jar} does not exist" unless="drjava-jar-exists" />
  </target>
  
  <target name="resolve-development-value">
    <condition property="development-value" value="true">
      <istrue value="${is-development}" />
    </condition>
    <!-- else... -->
    <property name="development-value" value="false" />
  </target>
  
  <target name="resolve-jvm-args">
    <condition property="jvm-args" value="-server">
      <istrue value="${force-server}" />
    </condition>
    <!-- else... -->
    <property name="jvm-args" value="" />
  </target>
  
  <target name="resolve-test-formatter-class">
    <condition property="test-formatter-class"
               value="edu.rice.cs.plt.ant.QuietJUnitResultFormatter">
      <equals arg1="quiet" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="edu.rice.cs.plt.ant.OneLineJUnitResultFormatter">
      <equals arg1="oneline" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter">
      <equals arg1="brief" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.PlainJUnitResultFormatter">
      <equals arg1="plain" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter">
      <equals arg1="xml" arg2="${test-formatter}" />
    </condition>
    <!-- else... -->
    <property name="test-formatter-class"
              value="edu.rice.cs.plt.ant.OneLineJUnitResultFormatter" />
  </target>
  
  <target name="resolve-version-tag">
    <!-- Get a timestamp based on GMT, rather than local time -->
    <tstamp>
      <format property="DSTAMP" pattern="yyyyMMdd" timezone="GMT" />
      <format property="TSTAMP" pattern="HHmm" timezone="GMT" />
      <format property="TODAY" pattern="MMMM dd yyyy" timezone="GMT" />
    </tstamp>
    <property name="version-tag"
              value="${ant.project.name}${tag-append}-${DSTAMP}-${TSTAMP}" />
  </target>  


  <!-- Sets "already-generated" if "generate-file" is more recent than "generate-sourcefile";
       otherwise, the out-of-date target file is deleted (if it exists).  Note that, since
       properties can only be set once, this should happen underneath an "antcall". -->
  <target name="check-generate-file-from-file">
    <dependset>
      <srcfilelist dir="${basedir}" files="${generate-sourcefile}" />
      <targetfilelist dir="${basedir}" files="${generate-file}" />
    </dependset>
    <available file="${generate-file}" property="already-generated" />
  </target>

  <!-- Sets "already-generated" if "generate-file" is more recent than everything in
       "generate-sourcedir"; otherwise, the out-of-date target file is deleted (if it exists).
        Note that, since properties can only be set once, this should happen underneath an "antcall". -->
  <target name="check-generate-file-from-dir">
    <dependset>
      <srcfileset dir="${generate-sourcedir}" />
      <targetfilelist dir="${basedir}" files="${generate-file}" />
    </dependset>
    <available file="${generate-file}" property="already-generated" />
  </target>

  <!-- Sets "already-generated" if "generate-dir" was created (or modified) more recently 
       than "generate-sourcefile".  Note that, since properties can only be set once, this 
       should happen underneath an "antcall". -->
  <target name="check-generate-dir-from-file">
    <uptodate property="already-generated" targetfile="${generate-dir}" srcfile="${generate-sourcefile}" />
  </target>
  
  <!-- Sets "already-generated" if "generate-dir" was created (or modified) more recently 
       than everything in "generate-sourcedir".  Note that, since properties can only be 
       set once, this should happen underneath an "antcall". -->
  <target name="check-generate-dir-from-dir">
    <!-- Unfortunately, a bug in uptodate prevents this from working properly,
         so we just have to equate *existence* with being up to date.
    <uptodate property="already-generated" targetfile="${generate-dir}" >
      <srcfiles dir="${generate-sourcedir}" />
    </uptodate>
    -->
    <available file="${generate-dir}" property="already-generated" />
  </target>


</project>

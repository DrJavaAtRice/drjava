/*BEGIN_COPYRIGHT_BLOCK
 *
 * Copyright (c) 2001-2008, JavaPLT group at Rice University (drjava@rice.edu)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of DrJava, the JavaPLT group, Rice University, nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software is Open Source Initiative approved Open Source Software.
 * Open Source Initative Approved is a trademark of the Open Source Initiative.
 * 
 * This file is part of DrJava.  Download the current version of this project
 * from http://www.drjava.org/ or http://sourceforge.net/projects/drjava/
 * 
 * END_COPYRIGHT_BLOCK*/

package edu.rice.cs.util;
import java.util.*;

public class OrderedBidirectionalHashMap<Type1, Type2> extends BidirectionalHashMap<Type1, Type2> {
 private ArrayList<Type2> order = new ArrayList<Type2>();

 public OrderedBidirectionalHashMap() { super(); }

 public void put(Type1 key, Type2 value) {
   super.put(key, value);
   order.add(value);
 }

 public Type2 removeValue(Type1 key) {
   Type2 value = super.removeValue(key);
   order.remove(value);
   return value;
 }

 public Type1 removeKey(Type2 value) {
   Type1 key = super.removeKey(value);
   order.remove(value);
   return key;
 }

 public Iterator<Type2> valuesIterator() { return new OBHMIterator(); }

 public Collection<Type2> values() { return order; }

 public void clear() {
   super.clear();
   order.clear();
 }

   /** Iterator class for BiDirectionalHashMap */
 class OBHMIterator implements Iterator<Type2> {

   Iterator<Type2> it = order.iterator();
   OrderedBidirectionalHashMap<Type1,Type2> OBHMthis = OrderedBidirectionalHashMap.this;

   /** Cached values of last key and value visited */
   Type1 lastKey = null;
   Type2 lastValue = null;

   public boolean hasNext() { return it.hasNext(); }

   public Type2 next() {
     lastValue = it.next();
     return lastValue;
   }

   /** Removes last element returned by next(); throws IllegalStateException if no such element */
   public void remove() {
     it.remove();                 /* throws exception if lastValue is null */
     lastKey = backward.get(lastValue);
     forward.remove(lastKey);     /* cannot fail because lastKey is not null */
     backward.remove(lastValue);  /* cannot fail because lastValue is not null */
     lastValue = null;
   }
 }
}
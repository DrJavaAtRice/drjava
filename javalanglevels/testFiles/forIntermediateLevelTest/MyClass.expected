// Language Level Converter line number map: dj*->java. Entries: 13
//     1->4         2->5         3->6         4->7         5->8         6->9         7->10        8->41   
//     9->42       10->43       11->44       12->45       13->46   
//This test makes sure that we allow narrowing of method return types in 1.5

class MyClass {
  public Object myField() {
    return new Object();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public MyClass() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      MyClass cast = ((MyClass) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
}

class MyIntegerClass extends MyClass{
  public Integer myField() {
    return new Integer(42);
  }

  /** This method is automatically generated by the Language Level Converter. */
  public MyIntegerClass() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      MyIntegerClass cast = ((MyIntegerClass) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
}
